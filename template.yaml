AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: flip it app infrastructure

Parameters:
  DeploymentBucket:
    Type: String
    Description: The name of the S3 bucket in which packaged code is stored
  StageName:
    Type: String
    Description: Current Stage
    Default: dev
  DomainName:
    Type: String
    Description: Domain Name
  Certificate:
    Type: String
    Description: ACM Certificate
  HostedZoneId:
    Type: String
    Description: Hosted Zone
  UserPool:
    Type: String
    Description: User Pool ARN

Globals:
  Function:
    Timeout: 3

Resources:
  FlipLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: fp-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: fp-lambda-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateTable
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt FlipTable.Arn

  FlipGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: fp-gateway-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - apigateway.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: fp-gateway-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: "arn:aws:apigateway:*::/restapis/*/authorizers"
              - Effect: Allow
                Action:
                  - apigateway:PATCH
                Resource: "arn:aws:apigateway:*::/restapis/*/authorizers/*"

  FlipAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: fp-api
      DefinitionUri: swaggerSpec.yaml
      StageName:
        Ref: StageName

  FlipTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: fp-table
      ProvisionedThroughput:
        ReadCapacityUnits: 7
        WriteCapacityUnits: 7
      AttributeDefinitions: 
        - 
          AttributeName: "pk"
          AttributeType: "S"
        - 
          AttributeName: "sk"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "pk"
          KeyType: "HASH"
        - 
          AttributeName: "sk"
          KeyType: "RANGE"

  FlipGetUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fp-get-user
      Runtime: nodejs8.10
      Handler: users.get
      CodeUri: build
      Role: !GetAtt FlipLambdaRole.Arn
      Environment:
        Variables:
          FLIP_TABLE: !Ref FlipTable
      Events:
        FlipGetUserAPI:
          Type: Api
          Properties:
            RestApiId: !Ref "FlipAPI"
            Path: /user/{userId}
            Method: GET

  FlipGetDeck:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fp-get-deck
      Runtime: nodejs8.10
      Handler: decks.get
      CodeUri: build
      Role: !GetAtt FlipLambdaRole.Arn
      Environment:
        Variables:
          FLIP_TABLE: !Ref FlipTable
      Events:
        FlipGetDeckAPI:
          Type: Api
          Properties:
            RestApiId: !Ref "FlipAPI"
            Path: /deck/{deckId}
            Method: GET

  FlipPutDeck:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fp-put-deck
      Runtime: nodejs8.10
      Handler: decks.put
      CodeUri: build
      Role: !GetAtt FlipLambdaRole.Arn
      Environment:
        Variables:
          FLIP_TABLE: !Ref FlipTable
      Events:
        FlipPutDeckAPI:
          Type: Api
          Properties:
            RestApiId: !Ref "FlipAPI"
            Path: /deck
            Method: PUT

  FlipDeleteDeck:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fp-delete-deck
      Runtime: nodejs8.10
      Handler: decks.delete
      CodeUri: build
      Role: !GetAtt FlipLambdaRole.Arn
      Environment:
        Variables:
          FLIP_TABLE: !Ref FlipTable
      Events:
        FlipDeleteDeckAPI:
          Type: Api
          Properties:
            RestApiId: !Ref "FlipAPI"
            Path: /deck/{deckId}
            Method: DELETE

  FlipGetCard:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fp-get-card
      Runtime: nodejs8.10
      Handler: cards.get
      CodeUri: build
      Role: !GetAtt FlipLambdaRole.Arn
      Environment:
        Variables:
          FLIP_TABLE: !Ref FlipTable
      Events:
        FlipGetDeckAPI:
          Type: Api
          Properties:
            RestApiId: !Ref "FlipAPI"
            Path: /deck/{deckId}/card/{cardId}
            Method: GET

  FlipPutCard:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fp-put-card
      Runtime: nodejs8.10
      Handler: cards.put
      CodeUri: build
      Role: !GetAtt FlipLambdaRole.Arn
      Environment:
        Variables:
          FLIP_TABLE: !Ref FlipTable
      Events:
        FlipPutDeckAPI:
          Type: Api
          Properties:
            RestApiId: !Ref "FlipAPI"
            Path: /deck/{deckId}/card
            Method: PUT

  FlipDeleteCard:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fp-delete-card
      Runtime: nodejs8.10
      Handler: cards.delete
      CodeUri: build
      Role: !GetAtt FlipLambdaRole.Arn
      Environment:
        Variables:
          FLIP_TABLE: !Ref FlipTable
      Events:
        FlipPutDeckAPI:
          Type: Api
          Properties:
            RestApiId: !Ref "FlipAPI"
            Path: /deck/{deckId}/card/{cardId}
            Method: DELETE

  FlipCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: fp-cognito-authorizer
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Ref UserPool
      RestApiId: !Ref FlipAPI
      IdentitySource: method.request.header.Authorization
      AuthorizerCredentials: !GetAtt FlipGatewayRole.Arn

  FlipCustomDomain:
    Type: AWS::ApiGateway::DomainName
    DependsOn: FlipAPI
    Properties:
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types:
          - "EDGE"
      CertificateArn: !Ref Certificate

  FlipCustomDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref FlipCustomDomain
      RestApiId: !Ref FlipAPI
      Stage: !Ref StageName

  FlipCustomDomainDNS:
    Type: AWS::Route53::RecordSetGroup
    DependsOn: FlipCustomDomain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
      - Type: A
        Name: !Ref DomainName
        AliasTarget:
          HostedZoneId: !GetAtt FlipCustomDomain.DistributionHostedZoneId
          DNSName: !GetAtt FlipCustomDomain.DistributionDomainName

