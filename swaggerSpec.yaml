openapi: 3.0.0

info:
  title: flip it app flashcards API
  version: 1.0

paths:
  /user/{userId}:
    get:
      summary: Returns user information
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: userId
      responses:
        "200":
          description: OK
        "400":
          description: The specified user ID is invalid.
        "500":
          description: Bad request.
        default:
          description: Unexpected error.
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:{{Region}}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{Region}}:{{Account}}:function:fp-get-user/invocations"
        credentials: "arn:aws:iam::{{Account}}:role/fp-gateway-role"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /deck/{deckId}:
    get:
      summary: Returns a list of decks by user
      parameters:
        - in: path
          name: deckId
          schema:
            type: string
          required: true
          description: composed by userName and deckName
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deck'
        "400":
          description: The specified user ID is invalid.
        "500":
          description: Bad request.
        default:
          description: Unexpected error.
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:{{Region}}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{Region}}:{{Account}}:function:fp-get-deck/invocations"
        credentials: "arn:aws:iam::{{Account}}:role/fp-gateway-role"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /deck:
    put:
      summary: saves or replaces a list of decks
      responses:
        "200":
          description: OK
        "400":
          description: The specified user ID is invalid.
        "500":
          description: Bad request.
        default:
          description: Unexpected error.
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:{{Region}}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{Region}}:{{Account}}:function:fp-put-deck/invocations"
        credentials: "arn:aws:iam::{{Account}}:role/fp-gateway-role"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    delete:
      summary: deletes all information regarding deckId
      responses:
        "200":
          description: OK
        "400":
          description: The specified user ID is invalid.
        "500":
          description: Bad request.
        default:
          description: Unexpected error.
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:{{Region}}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{Region}}:{{Account}}:function:fp-delete-deck/invocations"
        credentials: "arn:aws:iam::{{Account}}:role/fp-gateway-role"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

components:
  schemas:
    Deck:
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
      required:
        - name
